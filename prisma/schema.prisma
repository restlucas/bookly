generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  // url = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")

  provider = "mysql"
  url = env("DATABASE_URL")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  type               String    @map("provider_type")  
  provider           String    @map("provider_id")  
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @db.Text
  accessToken        String?   @db.Text @map("access_token")
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Category {
  id          String          @id @default(cuid())
  name        String      
  slug        String
  createdAt   DateTime  @default(now())

  professional  Professional[]
  occupations   Occupation[]

  @@map("categories")
}

model Occupation {
  id          String       @id @default(cuid())
  name        String    
  categoryId  String
  slug        String
  createdAt   DateTime  @default(now())

  professional Professional[]

  category    Category  @relation(fields: [categoryId], references: [id])

  @@map("occupations")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?
  image         String?
  birth         String?
  gender        String?
  address       String?
  userTypeId    String?
  favorites     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  professional  Professional?
  reviews       Review[]
  scheduling    Scheduling[]
  accounts      Account[]
  sessions      Session[]

  userType      UserType?    @relation(fields: [userTypeId], references: [id])

  @@map("users")
}

model Professional {
  id                      String @id @default(cuid())
  userId                  String @unique
  categoryId              String?
  occupationId            String?
  bio                     String? @db.Text
  serviceTypeId           String?
  serviceValue            String?
  serviceTimeInMinutes    Int @default(60)
  tags                    String?
  createdAt               DateTime @default(now())
  
  schedule                Schedule[]
  reviews                 Review[]
  professionalAbsence     Absence[]
  scheduling              Scheduling[]


  user                    User    @relation(fields: [userId], references: [id])
  occupation              Occupation?    @relation(fields: [occupationId], references: [id])
  category                Category?    @relation(fields: [categoryId], references: [id])
  serviceType             ServiceType?    @relation(fields: [serviceTypeId], references: [id])

  @@map("professionals")
}

model Schedule {
  id                  String @id @default(cuid())
  professionalId      String
  weekDay             Int
  enabled             Boolean @default(false)
  timeStartInMinutes  Int @default(480)
  timeEndInMinutes    Int @default(1080)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  professional        Professional    @relation(fields: [professionalId], references: [id])

  @@map("schedules")
}

model Review {
  id                  String @id @default(cuid())
  userId              String
  professionalId      String
  comment             String?
  rating              String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user                User    @relation(fields: [userId], references: [id])
  professional        Professional    @relation(fields: [professionalId], references: [id])

  @@map("reviews")
}

model Scheduling {
  id              String   @id @default(cuid())
  date            DateTime
  userId          String
  professionalId  String
  serviceTypeId   String
  statusId        String
  observations    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user            User    @relation(fields: [userId], references: [id])
  professional    Professional    @relation(fields: [professionalId], references: [id])
  status          Status    @relation(fields: [statusId], references: [id])
  serviceType     ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@map("schedulings")
}

model Status {
  id            String @id @default(cuid())
  name          String
  createdAt     DateTime @default(now())

  scheduling    Scheduling[]

  @@map("status")
}

model Absence {
  id                  String @id @default(cuid())
  professionalId      String
  absenceOptionId     String
  startTime           String
  endTime             String
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime  @updatedAt
  
  professional        Professional    @relation(fields: [professionalId], references: [id])
  absenceOption       AbsenceOptions    @relation(fields: [absenceOptionId], references: [id])

  @@map("absences")
}

model AbsenceOptions {
  id            String @id @default(cuid())
  name          String
  description   String
  createdAt     DateTime @default(now())

  absence       Absence[]

  @@map("absenceOptions")
}

model ServiceType {
  id    String @id @default(cuid())
  name  String
  slug  String

  professional  Professional[]
  scheduling    Scheduling[]

  @@map("serviceTypes")
}

model UserType {
  id    String @id @default(cuid())
  name  String
  slug  String

  user  User[]

  @@map("userTypes")
}